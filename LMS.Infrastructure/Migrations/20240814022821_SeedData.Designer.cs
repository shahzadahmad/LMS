// <auto-generated />
using System;
using LMS.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LMS.Infrastructure.Migrations
{
    [DbContext(typeof(LMSDbContext))]
    [Migration("20240814022821_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LMS.Domain.Entities.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Announcements");

                    b.HasData(
                        new
                        {
                            AnnouncementId = 1,
                            Content = "We are excited to have you in the course!",
                            CourseId = 1,
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2854),
                            CreatedBy = 1,
                            Title = "Welcome to the Course",
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2852)
                        },
                        new
                        {
                            AnnouncementId = 2,
                            Content = "New materials have been added.",
                            CourseId = 2,
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2858),
                            CreatedBy = 2,
                            Title = "Course Update",
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2857)
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerId = 1,
                            Content = "A variable is a storage location identified by a memory address.",
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2685),
                            IsCorrect = true,
                            QuestionId = 1,
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2686)
                        },
                        new
                        {
                            AnswerId = 2,
                            Content = "DI is a design pattern used to implement IoC, allowing for better decoupling of code.",
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2690),
                            IsCorrect = true,
                            QuestionId = 2,
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2691)
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Assessment", b =>
                {
                    b.Property<int>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AssessmentId");

                    b.HasIndex("CourseId");

                    b.ToTable("Assessments");

                    b.HasData(
                        new
                        {
                            AssessmentId = 1,
                            CourseId = 1,
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2543),
                            Description = "",
                            Title = "Assessment 1: Basics",
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2545)
                        },
                        new
                        {
                            AssessmentId = 2,
                            CourseId = 2,
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2549),
                            Description = "",
                            Title = "Assessment 1: Advanced Concepts",
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2549)
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2329),
                            Description = "Basic programming concepts",
                            Title = "Introduction to Programming",
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2333)
                        },
                        new
                        {
                            CourseId = 2,
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2337),
                            Description = ".NET Core and advanced topics",
                            Title = "Advanced .NET Development",
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2338)
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.DiscussionForum", b =>
                {
                    b.Property<int>("ForumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForumId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ForumId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("DiscussionForums");

                    b.HasData(
                        new
                        {
                            ForumId = 1,
                            CourseId = 1,
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2909),
                            CreatedBy = 1,
                            Description = "Discuss anything related to the course.",
                            Title = "General Discussion",
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2905)
                        },
                        new
                        {
                            ForumId = 2,
                            CourseId = 2,
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2913),
                            CreatedBy = 2,
                            Description = "Ask technical questions here.",
                            Title = "Technical Questions",
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2912)
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.ForumPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("ForumId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentPostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PostId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ForumId");

                    b.HasIndex("ParentPostId");

                    b.ToTable("ForumPosts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            Content = "This course is great!",
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(3051),
                            CreatedBy = 3,
                            ForumId = 1,
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(3053)
                        },
                        new
                        {
                            PostId = 2,
                            Content = "Can someone explain Dependency Injection?",
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(3058),
                            CreatedBy = 3,
                            ForumId = 2,
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(3058)
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LessonId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            LessonId = 1,
                            Content = "Introduction to variables",
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2480),
                            ModuleId = 1,
                            Title = "Lesson 1: Variables",
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2480)
                        },
                        new
                        {
                            LessonId = 2,
                            Content = "Introduction to DI in .NET",
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2484),
                            ModuleId = 2,
                            Title = "Lesson 1: Dependency Injection",
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2485)
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            Content = "Hello Instructor!",
                            ReceiverId = 2,
                            SenderId = 1,
                            SentAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2733)
                        },
                        new
                        {
                            MessageId = 2,
                            Content = "Hello Student!",
                            ReceiverId = 3,
                            SenderId = 2,
                            SentAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2737)
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ModuleId");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            ModuleId = 1,
                            Content = "Introduction to programming basics",
                            CourseId = 1,
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2400),
                            Title = "Module 1: Basics",
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2402)
                        },
                        new
                        {
                            ModuleId = 2,
                            Content = "Deep dive into .NET Core",
                            CourseId = 2,
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2406),
                            Title = "Module 1: Advanced Concepts",
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2406)
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            Content = "You have a new message.",
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2802),
                            IsRead = false,
                            UserId = 1
                        },
                        new
                        {
                            NotificationId = 2,
                            Content = "Your course has been updated.",
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2807),
                            IsRead = false,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("QuestionId");

                    b.HasIndex("AssessmentId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            AssessmentId = 1,
                            Content = "What is a variable?",
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2608),
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2610)
                        },
                        new
                        {
                            QuestionId = 2,
                            AssessmentId = 2,
                            Content = "Explain Dependency Injection.",
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2614),
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(2615)
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Administrator with full access",
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Instructor with access to create and manage courses",
                            Name = "Instructor"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Student with access to view and take courses",
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(1563),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            FullName = "Admin User",
                            PasswordHash = "AQAAAAIAAYagAAAAEEEQeDbdNV5MgtGE9xRiBmHn6LHimppoTNMc5e+kfJyWOZulKNJ7QFrSr7KxgFsMoA==",
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(1564),
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(1570),
                            DateOfBirth = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "instructor@example.com",
                            FullName = "Instructor User",
                            PasswordHash = "AQAAAAIAAYagAAAAEEEQeDbdNV5MgtGE9xRiBmHn6LHimppoTNMc5e+kfJyWOZulKNJ7QFrSr7KxgFsMoA==",
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(1571),
                            Username = "instructor"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(1575),
                            DateOfBirth = new DateTime(1990, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student@example.com",
                            FullName = "Student User",
                            PasswordHash = "AQAAAAIAAYagAAAAEEEQeDbdNV5MgtGE9xRiBmHn6LHimppoTNMc5e+kfJyWOZulKNJ7QFrSr7KxgFsMoA==",
                            UpdatedAt = new DateTime(2024, 8, 14, 2, 28, 20, 53, DateTimeKind.Utc).AddTicks(1576),
                            Username = "student"
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Announcement", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Answer", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Assessment", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Course", "Course")
                        .WithMany("Assessments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LMS.Domain.Entities.DiscussionForum", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("LMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("LMS.Domain.Entities.ForumPost", b =>
                {
                    b.HasOne("LMS.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Domain.Entities.DiscussionForum", "Forum")
                        .WithMany("Posts")
                        .HasForeignKey("ForumId")
                        .IsRequired();

                    b.HasOne("LMS.Domain.Entities.ForumPost", "ParentPost")
                        .WithMany("Replies")
                        .HasForeignKey("ParentPostId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Forum");

                    b.Navigation("ParentPost");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Message", b =>
                {
                    b.HasOne("LMS.Domain.Entities.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .IsRequired();

                    b.HasOne("LMS.Domain.Entities.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Module", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Notification", b =>
                {
                    b.HasOne("LMS.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Question", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Assessment", "Assessment")
                        .WithMany("Questions")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("LMS.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Assessment", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Course", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("LMS.Domain.Entities.DiscussionForum", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("LMS.Domain.Entities.ForumPost", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Module", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("LMS.Domain.Entities.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
